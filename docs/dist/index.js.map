{
  "version": 3,
  "sources": ["../../docs/dist/lib/utils.js", "../../docs/dist/config.js", "../../docs/dist/lib/github.js", "../../docs/dist/index.js"],
  "sourcesContent": ["/**\n * @template T\n * @param  {...any} args\n * @returns {Promise<T>}\n */\nexport async function getJSON(...args) {\n  if (fetch) {\n    return fetch(...args).then((res) => res.json());\n  }\n  throw new Error('No polyfill for fetch');\n}\n\n/**\n * @template T\n * @param  {(...args: any) => any} fn\n * @param {('session' | 'local')} persistence\n * @returns {(...args: any) => Promise<T>}\n */\nexport function withStash(fn, key, persistence = 'session') {\n  const wrapper = async (...args) => fn(...args);\n  const storage = persistence === 'session' ? sessionStorage : localStorage;\n\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  async function inner(...args) {\n    const stored = storage.getItem(key);\n\n    if (stored) {\n      /** @type {{ data: T }} */\n      const { data } = JSON.parse(stored);\n\n      return data;\n    }\n\n    const data = await wrapper(...args);\n    storage.setItem(key, JSON.stringify({ data }));\n    return data;\n  }\n\n  return inner;\n}", "export const gists = {\n  '293bf01a19c36c6e301d2fa070c76e35': {\n    title: 'Object literals',\n    description: `This article is here to show the capabilities of object literals \n      and how with one syntax you can do many things in JS.`,\n    filename: 'oliterals.md',\n  },\n  '476db0500a89d5a97acf1332f4d71c44': {\n    title: 'Pizza',\n    description: `Pizza recipe and tricks for home oven.`,\n    filename: 'pizza.md',\n    image: 'images/pizza.jpg'\n  }\n};\n\nexport const ENTRYPOINT = 'https://api.github.com';\nexport const USERNAME = 'shaqash';\n\nexport const random = [\n  'This site is written with pure JS',\n  'Pizza time',\n]", "import { getJSON, withStash } from './utils.js';\nimport { ENTRYPOINT, USERNAME } from '../config.js';\n\n/**\n * @param {string} entrypoint\n * @param {string} username\n * @returns {Promise<Userdata>}\n */\nasync function getUserData(entrypoint, username) {\n  return getJSON(`${entrypoint}/users/${username}`);\n}\n\n/**\n * @param {string} entrypoint\n * @param {string} username\n * @returns {Promise<Repo[]>}\n */\nasync function getUserRepos(entrypoint, username) {\n  /** @type {Repo[]} */\n  const repos = await getJSON(`${entrypoint}/users/${username}/starred`)\n\n  return repos.filter((repo) => repo.owner.login === username);\n}\n\n/**\n * @param {string} entrypoint\n * @param {string} gistId\n * @returns {Promise<Gist>}\n */\nasync function getGist(entrypoint, gistId) {\n  const url = `${entrypoint}/gists/${gistId}`;\n  const [data, comments] = await Promise.all([\n    getJSON(url),\n    getJSON(`${url}/comments`),\n  ]);\n\n  return {\n    data,\n    comments,\n  }\n}\n\n/**\n * @param {string[]} gistIds\n * @returns {Promise<Gist[]>}\n */\nasync function getGists(entrypoint, gistIds) {\n  return Promise.all(gistIds.map((id) => getGist(entrypoint, id)));\n}\n\nconst def = {\n  /** @type {(username: string) => Promise<Userdata>} */\n  getUserData: (username = USERNAME) => withStash(getUserData, 'SHAQ_USER')(ENTRYPOINT, username),\n  /** @type {(username: string) => Promise<Repo[]>} */\n  getUserRepos: (username = USERNAME) => withStash(getUserRepos, 'SHAQ_REPOS')(ENTRYPOINT, username),\n  /** @type {(gistIds: string[]) => Promise<Gist[]>} */\n  getGists: (gistIds) => withStash(getGists, 'SHAQ_GIST')(ENTRYPOINT, gistIds),\n}\n\nexport default def;\n", "import github from './lib/github.js';\nimport { gists, USERNAME } from './config.js';\nimport { random } from './config.js';\n\nexport async function renderGists(slicer = 0) {\n  const keys = Object.keys(gists);\n  const userGists = await github.getGists(keys);\n\n  const posts = Object.values(gists).map(({ description, title, image }, index) => `\n    <div class=\"post\">\n      <div>\n        <a href=\"https://gist.github.com/${USERNAME}/${keys[index]}\">\n          <h2>${title}</h2>\n        </a>\n        <small>\n            Posted by \n            <img class=\"small\" src=\"${userGists[0].data.owner.avatar_url}\" alt=\"\" />\n            <i>${userGists[index].data.owner.login}</i>\n            @ ${new Date(userGists[index].data.created_at).toLocaleDateString()}\n        </small>\n        <p>\n          ${description}\n        </p>\n        <small>${userGists[index].comments.length} comment/s</small>\n      </div>\n      <div>\n        ${image ? `<img class=\"medium\" src=\"${image}\" alt=\"\" />` : ''}\n      </div>\n    </div>\n  `);\n\n  return `\n    <section>\n      ${posts.reduceRight((acc, cur) => [...acc, cur], []).slice(slicer).join('')}\n    </section>\n  `;\n}\n\nexport function renderRandom() {\n  const index = Math.floor(Math.random() * random.length);\n\n  return random[index];\n}\n\n/**\n * @param {(...args: any) => any} fn \n * @param {HTMLElement} node \n */\nexport async function render(fn, node) {\n  const wrapper = async (...args) => fn(...args);\n\n  return node.innerHTML = await wrapper();\n}\n\nfunction main($) {\n  const random = $('#random');\n  const menu = $('.menu');\n\n  // Sticky menu\n  window.onscroll = () => {\n    if (window.pageYOffset > menu.offsetTop) {\n      menu.classList.add(\"sticky\");\n    } else {\n      menu.classList.remove(\"sticky\");\n    }\n  }\n\n  // Render\n  render(renderRandom, random)\n}\n\nconst query = (selector) => document.querySelector(selector);\nmain(query);"],
  "mappings": "AAKA,oBAAiC,EAAM,CACrC,GAAI,MACF,MAAO,OAAM,GAAG,GAAM,KAAK,AAAC,GAAQ,EAAI,QAE1C,KAAM,IAAI,OAAM,yBASX,WAAmB,EAAI,EAAK,EAAc,UAAW,CAC1D,GAAM,GAAU,SAAU,IAAS,EAAG,GAAG,GACnC,EAAU,IAAgB,UAAY,eAAiB,aAM7D,oBAAwB,EAAM,CAC5B,GAAM,GAAS,EAAQ,QAAQ,GAE/B,GAAI,EAAQ,CAEV,GAAM,CAAE,QAAS,KAAK,MAAM,GAE5B,MAAO,GAGT,GAAM,GAAO,KAAM,GAAQ,GAAG,GAC9B,SAAQ,QAAQ,EAAK,KAAK,UAAU,CAAE,UAC/B,EAGT,MAAO,GCzCF,GAAM,GAAQ,CACnB,mCAAoC,CAClC,MAAO,kBACP,YAAa;AAAA,6DAEb,SAAU,gBAEZ,mCAAoC,CAClC,MAAO,QACP,YAAa,yCACb,SAAU,WACV,MAAO,qBAIE,EAAa,yBACb,EAAW,UAEX,EAAS,CACpB,oCACA,cCZF,iBAA2B,EAAY,EAAU,CAC/C,MAAO,GAAQ,GAAG,WAAoB,KAQxC,iBAA4B,EAAY,EAAU,CAIhD,MAAO,AAFO,MAAM,GAAQ,GAAG,WAAoB,cAEtC,OAAO,AAAC,GAAS,EAAK,MAAM,QAAU,GAQrD,iBAAuB,EAAY,EAAQ,CACzC,GAAM,GAAM,GAAG,WAAoB,IAC7B,CAAC,EAAM,GAAY,KAAM,SAAQ,IAAI,CACzC,EAAQ,GACR,EAAQ,GAAG,gBAGb,MAAO,CACL,OACA,YAQJ,iBAAwB,EAAY,EAAS,CAC3C,MAAO,SAAQ,IAAI,EAAQ,IAAI,AAAC,GAAO,EAAQ,EAAY,KAG7D,GAAM,GAAM,CAEV,YAAa,CAAC,EAAW,IAAa,EAAU,EAAa,aAAa,EAAY,GAEtF,aAAc,CAAC,EAAW,IAAa,EAAU,EAAc,cAAc,EAAY,GAEzF,SAAU,AAAC,GAAY,EAAU,EAAU,aAAa,EAAY,IAG/D,EAAQ,ECvDf,iBAAkC,EAAS,EAAG,CAC5C,GAAM,GAAO,OAAO,KAAK,GACnB,EAAY,KAAM,GAAO,SAAS,GAyBxC,MAAO;AAAA;AAAA,QAED,AAzBQ,OAAO,OAAO,GAAO,IAAI,CAAC,CAAE,cAAa,QAAO,SAAS,IAAU;AAAA;AAAA;AAAA,2CAGxC,KAAY,EAAK;AAAA,gBAC5C;AAAA;AAAA;AAAA;AAAA,sCAIsB,EAAU,GAAG,KAAK,MAAM;AAAA,iBAC7C,EAAU,GAAO,KAAK,MAAM;AAAA,gBAC7B,GAAI,MAAK,EAAU,GAAO,KAAK,YAAY;AAAA;AAAA;AAAA,YAG/C;AAAA;AAAA,iBAEK,EAAU,GAAO,SAAS;AAAA;AAAA;AAAA,UAGjC,EAAQ,4BAA4B,eAAqB;AAAA;AAAA;AAAA,KAOrD,YAAY,CAAC,EAAK,IAAQ,CAAC,GAAG,EAAK,GAAM,IAAI,MAAM,GAAQ,KAAK;AAAA;AAAA,IAKvE,YAAwB,CAC7B,GAAM,GAAQ,KAAK,MAAM,KAAK,SAAW,EAAO,QAEhD,MAAO,GAAO,GAOhB,iBAA6B,EAAI,EAAM,CACrC,GAAM,GAAU,SAAU,IAAS,EAAG,GAAG,GAEzC,MAAO,GAAK,UAAY,KAAM,KAGhC,WAAc,EAAG,CACf,GAAM,GAAS,EAAE,WACX,EAAO,EAAE,SAGf,OAAO,SAAW,IAAM,CACtB,AAAI,OAAO,YAAc,EAAK,UAC5B,EAAK,UAAU,IAAI,UAEnB,EAAK,UAAU,OAAO,WAK1B,EAAO,EAAc,GAGvB,GAAM,GAAQ,AAAC,GAAa,SAAS,cAAc,GACnD,EAAK",
  "names": []
}
