{
  "version": 3,
  "sources": ["../../docs/dist/lib/utils.js", "../../docs/dist/config.js", "../../docs/dist/lib/github.js", "../../docs/dist/index.js"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:b8999bbaf509c08d127678643c515b9ab0836bae&dn=ISC.txt ISC\n/**\n * @template T\n * @param  {...any} args\n * @returns {Promise<T>}\n */\nexport async function getJSON(...args) {\n  if (fetch) {\n    return fetch(...args).then((res) => res.json());\n  }\n  throw new Error('No polyfill for fetch');\n}\n\n/**\n * @template T\n * @param  {(...args: any) => any} fn\n * @param {('session' | 'local')} persistence\n * @returns {(...args: any) => Promise<T>}\n */\nexport function withStash(fn, key, persistence = 'session') {\n  const wrapper = async (...args) => fn(...args);\n  const storage = persistence === 'session' ? sessionStorage : localStorage;\n\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  async function inner(...args) {\n    const stored = storage.getItem(key);\n\n    if (stored) {\n      /** @type {{ data: T }} */\n      const { data } = JSON.parse(stored);\n\n      return data;\n    }\n\n    const data = await wrapper(...args);\n    storage.setItem(key, JSON.stringify({ data }));\n    return data;\n  }\n\n  return inner;\n}\n// @license-end\n", "// @license magnet:?xt=urn:btih:b8999bbaf509c08d127678643c515b9ab0836bae&dn=ISC.txt ISC\nexport const gists = {\n  '293bf01a19c36c6e301d2fa070c76e35': {\n    title: 'Object literals',\n    description: `This article is here to show the capabilities of object literals\n      and how with one syntax you can do many things in JS.`,\n    filename: 'oliterals.md',\n  },\n  '476db0500a89d5a97acf1332f4d71c44': {\n    title: 'Pizza',\n    description: `Pizza recipe and tricks for home oven.`,\n    filename: 'pizza.md',\n    image: 'images/pizza.jpg'\n  }\n};\n\nexport const ENTRYPOINT = 'https://api.github.com';\nexport const USERNAME = 'shaqash';\n\nexport const random = [\n  'This site is written with pure JS',\n  'Pizza time',\n]\n// @license-end\n", "// @license magnet:?xt=urn:btih:b8999bbaf509c08d127678643c515b9ab0836bae&dn=ISC.txt ISC\nimport { getJSON, withStash } from './utils.js';\nimport { ENTRYPOINT, USERNAME } from '../config.js';\n\n/**\n * @param {string} entrypoint\n * @param {string} username\n * @returns {Promise<Userdata>}\n */\nasync function getUserData(entrypoint, username) {\n  return getJSON(`${entrypoint}/users/${username}`);\n}\n\n/**\n * @param {string} entrypoint\n * @param {string} username\n * @returns {Promise<Repo[]>}\n */\nasync function getUserRepos(entrypoint, username) {\n  /** @type {Repo[]} */\n  const repos = await getJSON(`${entrypoint}/users/${username}/starred`)\n\n  return repos.filter((repo) => repo.owner.login === username);\n}\n\n/**\n * @param {string} entrypoint\n * @param {string} gistId\n * @returns {Promise<Gist>}\n */\nasync function getGist(entrypoint, gistId) {\n  const url = `${entrypoint}/gists/${gistId}`;\n  const [data, comments] = await Promise.all([\n    getJSON(url),\n    getJSON(`${url}/comments`),\n  ]);\n\n  return {\n    data,\n    comments,\n  }\n}\n\n/**\n * @param {string[]} gistIds\n * @returns {Promise<Gist[]>}\n */\nasync function getGists(entrypoint, gistIds) {\n  return Promise.all(gistIds.map((id) => getGist(entrypoint, id)));\n}\n\nconst def = {\n  /** @type {(username: string) => Promise<Userdata>} */\n  getUserData: (username = USERNAME) => withStash(getUserData, 'SHAQ_USER')(ENTRYPOINT, username),\n  /** @type {(username: string) => Promise<Repo[]>} */\n  getUserRepos: (username = USERNAME) => withStash(getUserRepos, 'SHAQ_REPOS')(ENTRYPOINT, username),\n  /** @type {(gistIds: string[]) => Promise<Gist[]>} */\n  getGists: (gistIds) => withStash(getGists, 'SHAQ_GIST')(ENTRYPOINT, gistIds),\n}\n\nexport default def;\n// @license-end\n", "// @license magnet:?xt=urn:btih:b8999bbaf509c08d127678643c515b9ab0836bae&dn=ISC.txt ISC\nimport github from './lib/github.js';\nimport { gists, USERNAME } from './config.js';\nimport { random } from './config.js';\n\nexport async function renderGists(slicer = 0) {\n  const keys = Object.keys(gists);\n  const userGists = await github.getGists(keys);\n\n  const posts = Object.values(gists).map(({ description, title, image }, index) => `\n    <div class=\"post\">\n      <div>\n        <a href=\"https://gist.github.com/${USERNAME}/${keys[index]}\">\n          <h2>${title}</h2>\n        </a>\n        <small>\n            Posted by\n            <img class=\"small\" src=\"${userGists[0].data.owner.avatar_url}\" alt=\"\" />\n            <i>${userGists[index].data.owner.login}</i>\n            @ ${new Date(userGists[index].data.created_at).toLocaleDateString()}\n        </small>\n        <p>\n          ${description}\n        </p>\n        <small>${userGists[index].comments.length} comment/s</small>\n      </div>\n      <div>\n        ${image ? `<img class=\"medium\" src=\"${image}\" alt=\"\" />` : ''}\n      </div>\n    </div>\n  `);\n\n  return `\n    <section>\n      ${posts.reduceRight((acc, cur) => [...acc, cur], []).slice(slicer).join('')}\n    </section>\n  `;\n}\n\nexport function renderRandom() {\n  const index = Math.floor(Math.random() * random.length);\n\n  return random[index];\n}\n\n/**\n * @param {(...args: any) => any} fn\n * @param {HTMLElement} node\n */\nexport async function render(fn, node) {\n  const wrapper = async (...args) => fn(...args);\n\n  return node.innerHTML = await wrapper();\n}\n\nfunction main($) {\n  const random = $('#random');\n  const menu = $('.menu');\n\n  // Sticky menu\n  window.onscroll = () => {\n    if (window.pageYOffset > menu.offsetTop) {\n      menu.classList.add(\"sticky\");\n    } else {\n      menu.classList.remove(\"sticky\");\n    }\n  }\n\n  // Render\n  render(renderRandom, random)\n}\n\nconst query = (selector) => document.querySelector(selector);\nmain(query);\n\n// @license-end\n"],
  "mappings": "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",
  "names": []
}
